import numpy as np

'''
기계학습 문제는 분류classification와 회귀regression로 나뉜다.
분류 : 데이터가 어느 클래스에 속하는가 하는 문제. ex.사진속 인물의 성별
회귀 : 입력 데이터에서 (연속적인) 수치를 예측하는 문제. ex. 사진속 인물의 몸무게
'''


# 3.5.1 항등 함수와 소프트맥스 함수 구현하기
'''
소프트맥스 함수 softmax function
yk = exp(ak) / sigma(i=1 to n)(exp(ai))
'''


def softmax(a):
    c = np.max(a)
    exp_a = np.exp(a - c)  # 오버플로 대책
    sum_exp_a = np.sum(exp_a)
    y = exp_a / sum_exp_a

    return y


# 3.5.2 소프트맥스 함수 구현시 주의점
'''
소프트맥스 함수는 지수함수를 사용하기 때문에 아주 큰 값을 사용하게 되고,
오버플로로 인해 결과 수치가 불안정해질 수 있다.
분자분모에 특정 수치(일반적으로 최대값)을 곱해줘서 결과를 보정한다.
'''
print(softmax(np.array([1010, 1000, 990])))
# [ nan  nan  nan] 제대로 계산 X
# [  9.99954600e-01   4.53978686e-05   2.06106005e-09] 오버플로 막은 후 결과

# 3.5.3 소프트맥스 함수의 특징
a = np.array([0.3, 2.9, 4.0])
y = softmax(a)
print(y)  # [ 0.01821127  0.24519181  0.73659691]
print(np.sum(y))  # 1.0
'''
소프트맥스 함수의 출력은 0에서 1사이의 실수이며 출력의 총합은 1이다.
따라서 출력을 확률로 해석할 수 있다.
단, 원소의 대소 관계는 변하지 않기 때문에 자원 낭비를 줄이기 위해 생략하기도 한다.

기계 학습의 문제 풀이는 학습과 추론의 두 단계로 이루어진다.
추론 단계에서는 출력층의 소프트맥스 함수를 생략하는 것이 일반적이며,
학습시킬때는 출력층에서 소프트맥스 함수를 사용한다.
'''

# 3.5.4 출력층의 뉴런 수 정하기
'''
출력층의 뉴런 수는 풀려는 문제에 맞게 적절히 정해야 한다.
분류에서는 분류하고 싶은 클래스 수로 설정하는 것이 일반적이다.
예를 들어 이미지를 0~9로 분류하는 문제에서는 출력층을 10개로 설정한다.
'''
